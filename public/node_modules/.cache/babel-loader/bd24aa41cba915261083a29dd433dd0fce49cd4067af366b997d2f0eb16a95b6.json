{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nagadevi\\\\task\\\\src\\\\components\\\\meme.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport MemeData from \"./components/MemeData.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Meme() {\n  _s();\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemes, setAllMemes] = React.useState(MemeData);\n  React.useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json()).then(data => setAllMemes(data.data.memes));\n  }, []);\n  function getMemeImage() {\n    const randomNumber = Math.floor(Math.random() * allMemes.length);\n    const url = allMemes[randomNumber].url;\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      randomImage: url\n    }));\n  }\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      [name]: value\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Top text\",\n        className: \"form-input\",\n        name: \"topText\",\n        value: meme.topText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Bottom text\",\n        className: \"form-input\",\n        name: \"bottomText\",\n        value: meme.bottomText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--button\",\n        onClick: getMemeImage,\n        children: \"Get a new meme image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.randomImage,\n        className: \"meme-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text top\",\n        children: meme.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text bottom\",\n        children: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n_s(Meme, \"N6yNSvwFNraHmpcSgETdpRGIlDQ=\");\n_c = Meme;\nvar _c;\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","MemeData","jsxDEV","_jsxDEV","Meme","_s","meme","setMeme","useState","topText","bottomText","randomImage","allMemes","setAllMemes","useEffect","fetch","then","res","json","data","memes","getMemeImage","randomNumber","Math","floor","random","length","url","prevMeme","handleChange","event","name","value","target","children","className","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","_c","$RefreshReg$"],"sources":["C:/Users/Nagadevi/task/src/components/meme.js"],"sourcesContent":["import React from \"react\"\r\nimport MemeData from \"./components/MemeData.js\"\r\nexport default function Meme(){\r\n    const [meme, setMeme] = React.useState({\r\n        topText: \"\",\r\n        bottomText: \"\",\r\n        randomImage: \"http://i.imgflip.com/1bij.jpg\" \r\n    })\r\n    const [allMemes, setAllMemes] = React.useState(MemeData)\r\n\r\n    React.useEffect(() => {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(res => res.json())\r\n            .then(data => setAllMemes(data.data.memes))\r\n    }, [])\r\n    \r\n    function getMemeImage() {\r\n      \r\n        const randomNumber = Math.floor(Math.random() * allMemes.length)\r\n        const url = allMemes[randomNumber].url\r\n        setMeme(prevMeme => ({\r\n            ...prevMeme,\r\n            randomImage: url\r\n        }))\r\n        \r\n    }\r\n    function handleChange(event) {\r\n        const {name, value} = event.target\r\n        setMeme(prevMeme => ({\r\n            ...prevMeme,\r\n            [name]: value\r\n        }))\r\n    }\r\n   \r\n    return(\r\n        <main>\r\n            <div className=\"form\">\r\n                <input type=\"text\"\r\n                    placeholder=\"Top text\"\r\n                    className=\"form-input\"\r\n                    name=\"topText\"\r\n                    value={meme.topText}\r\n                    onChange={handleChange}\r\n                    />\r\n                <input type=\"text\"\r\n                    placeholder=\"Bottom text\"\r\n                    className=\"form-input\"\r\n                    name=\"bottomText\"\r\n                    value={meme.bottomText}\r\n                    onChange={handleChange}\r\n                />\r\n                <button className=\"form--button\"\r\n                    onClick={getMemeImage}\r\n                >Get a new meme image</button>\r\n            </div>\r\n            <div className=\"meme\">\r\n                <img src={meme.randomImage} className=\"meme-image\"/>\r\n                <h2 className=\"meme--text top\">{meme.topText}</h2>\r\n                <h2 className=\"meme--text bottom\">{meme.bottomText}</h2>\r\n            </div>\r\n        </main>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}